{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation searchFlight\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Plain(params) {\n    return this.searchFlight$Plain$Response(params).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight(params) {\n    return this.searchFlight$Response(params).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation findFlight\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Plain(params) {\n    return this.findFlight$Plain$Response(params).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Response(params) {\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json'\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight(params) {\n    return this.findFlight$Response(params).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.FindFlightPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,YAAY,QAAQ,sBAAsB;AAC/D,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;;;AAO5C,OAAM,MAAOC,aAAc,SAAQJ,WAAW;EAC5CK,YACEC,MAAwB,EACxBC,IAAgB;IAEhB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;;;EAKA;;;;;;EAMAC,2BAA2B,CAACC,MAC3B;IAEC,MAAMC,EAAE,GAAG,IAAIT,cAAc,CAAC,IAAI,CAACU,OAAO,EAAEP,aAAa,CAACQ,gBAAgB,EAAE,KAAK,CAAC;IAClF,IAAIH,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACM,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE;KACT,CAAC,CAAC,CAACC,IAAI,CACNd,MAAM,CAAEe,CAAM,IAAKA,CAAC,YAAYnB,YAAY,CAAC,EAC7CG,GAAG,CAAEgB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,kBAAkB,CAACV,MAClB;IAEC,OAAO,IAAI,CAACD,2BAA2B,CAACC,MAAM,CAAC,CAACQ,IAAI,CAClDf,GAAG,CAAEgB,CAAsC,IAAKA,CAAC,CAACE,IAAuB,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAC,qBAAqB,CAACZ,MACrB;IAEC,MAAMC,EAAE,GAAG,IAAIT,cAAc,CAAC,IAAI,CAACU,OAAO,EAAEP,aAAa,CAACQ,gBAAgB,EAAE,KAAK,CAAC;IAClF,IAAIH,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACM,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE;KACT,CAAC,CAAC,CAACC,IAAI,CACNd,MAAM,CAAEe,CAAM,IAAKA,CAAC,YAAYnB,YAAY,CAAC,EAC7CG,GAAG,CAAEgB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,YAAY,CAACb,MACZ;IAEC,OAAO,IAAI,CAACY,qBAAqB,CAACZ,MAAM,CAAC,CAACQ,IAAI,CAC5Cf,GAAG,CAAEgB,CAAsC,IAAKA,CAAC,CAACE,IAAuB,CAAC,CAC3E;EACH;EAEA;;;;EAKA;;;;;;EAMAG,yBAAyB,CAACd,MAEzB;IAEC,MAAMC,EAAE,GAAG,IAAIT,cAAc,CAAC,IAAI,CAACU,OAAO,EAAEP,aAAa,CAACoB,cAAc,EAAE,KAAK,CAAC;IAChF,IAAIf,MAAM,EAAE;MACVC,EAAE,CAACe,IAAI,CAAC,IAAI,EAAEhB,MAAM,CAACiB,EAAE,EAAE,EAAE,CAAC;;IAG9B,OAAO,IAAI,CAACnB,IAAI,CAACM,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE;KACT,CAAC,CAAC,CAACC,IAAI,CACNd,MAAM,CAAEe,CAAM,IAAKA,CAAC,YAAYnB,YAAY,CAAC,EAC7CG,GAAG,CAAEgB,CAAoB,IAAI;MAC3B,OAAOA,CAAiC;IAC1C,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAS,gBAAgB,CAAClB,MAEhB;IAEC,OAAO,IAAI,CAACc,yBAAyB,CAACd,MAAM,CAAC,CAACQ,IAAI,CAChDf,GAAG,CAAEgB,CAA+B,IAAKA,CAAC,CAACE,IAAgB,CAAC,CAC7D;EACH;EAEA;;;;;;EAMAQ,mBAAmB,CAACnB,MAEnB;IAEC,MAAMC,EAAE,GAAG,IAAIT,cAAc,CAAC,IAAI,CAACU,OAAO,EAAEP,aAAa,CAACoB,cAAc,EAAE,KAAK,CAAC;IAChF,IAAIf,MAAM,EAAE;MACVC,EAAE,CAACe,IAAI,CAAC,IAAI,EAAEhB,MAAM,CAACiB,EAAE,EAAE,EAAE,CAAC;;IAG9B,OAAO,IAAI,CAACnB,IAAI,CAACM,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE;KACT,CAAC,CAAC,CAACC,IAAI,CACNd,MAAM,CAAEe,CAAM,IAAKA,CAAC,YAAYnB,YAAY,CAAC,EAC7CG,GAAG,CAAEgB,CAAoB,IAAI;MAC3B,OAAOA,CAAiC;IAC1C,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAW,UAAU,CAACpB,MAEV;IAEC,OAAO,IAAI,CAACmB,mBAAmB,CAACnB,MAAM,CAAC,CAACQ,IAAI,CAC1Cf,GAAG,CAAEgB,CAA+B,IAAKA,CAAC,CAACE,IAAgB,CAAC,CAC7D;EACH;;AA9KWhB,aAAc,CAWTQ,gBAAgB,GAAG,SAAS;AAXjCR,aAAc,CA4FToB,cAAc,GAAG,cAAc;AA5FpCpB,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAA0B,SAAb1B,aAAa;EAAA2B,YAFZ;AAAM","names":["HttpResponse","BaseService","RequestBuilder","map","filter","FlightService","constructor","config","http","searchFlight$Plain$Response","params","rb","rootUrl","SearchFlightPath","request","build","responseType","accept","pipe","r","searchFlight$Plain","body","searchFlight$Response","searchFlight","findFlight$Plain$Response","FindFlightPath","path","id","findFlight$Plain","findFlight$Response","findFlight","factory","providedIn"],"sourceRoot":"","sources":["D:\\Contents\\Practice\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FlightService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation searchFlight\r\n   */\r\n  static readonly SearchFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain$Response(params?: {\r\n  }): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Plain(params?: {\r\n  }): Observable<Array<FlightRm>> {\r\n\r\n    return this.searchFlight$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>) => r.body as Array<FlightRm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Response(params?: {\r\n  }): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.SearchFlightPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight(params?: {\r\n  }): Observable<Array<FlightRm>> {\r\n\r\n    return this.searchFlight$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>) => r.body as Array<FlightRm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation findFlight\r\n   */\r\n  static readonly FindFlightPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain$Response(params: {\r\n    id: string;\r\n  }): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Plain(params: {\r\n    id: string;\r\n  }): Observable<FlightRm> {\r\n\r\n    return this.findFlight$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Response(params: {\r\n    id: string;\r\n  }): Observable<StrictHttpResponse<FlightRm>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, FlightService.FindFlightPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<FlightRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight(params: {\r\n    id: string;\r\n  }): Observable<FlightRm> {\r\n\r\n    return this.findFlight$Response(params).pipe(\r\n      map((r: StrictHttpResponse<FlightRm>) => r.body as FlightRm)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}